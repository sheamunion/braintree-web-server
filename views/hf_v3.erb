<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Checkout</title>
  </head>
  <body>
    <form action="/pm-create" id="my-sample-form" method="post">
      <label for="card-number">Card Number</label>
      <div id="card-number"></div>

      <label for="cvv">CVV</label>
      <div id="cvv"></div>

      <label for="expiration-date">Expiration Date</label>
      <div id="expiration-date"></div>
      <input type="hidden" name="payment_method_nonce" id="payment_method_nonce">
      <input type="submit" value="Pay" disabled />
      <div id="paypal-button"></div>
    </form>

    <script src="https://js.braintreegateway.com/web/3.22.2/js/client.min.js"></script>
    <script src="https://js.braintreegateway.com/web/3.22.2/js/hosted-fields.min.js"></script>
    <script src="https://js.braintreegateway.com/web/3.22.2/js/data-collector.min.js"></script>

    <!-- Load Apple Pay component. -->
    <script src="https://js.braintreegateway.com/web/3.22.2/js/apple-pay.min.js"></script>

    <!-- Load PayPal's checkout.js Library. -->
    <script src="https://www.paypalobjects.com/api/checkout.js" data-version-4 log-level="warn"></script>

    <!-- Load the PayPal Checkout component. -->
    <script src="https://js.braintreegateway.com/web/3.22.2/js/paypal-checkout.min.js"></script>

    <script>
      var form = document.querySelector('#my-sample-form');
      var submit = document.querySelector('input[type="submit"]');
      var client_token = '<%= @token %>';

      if (!window.ApplePaySession) {
          console.error('This device does not support Apple Pay');
      }

      if (!ApplePaySession.canMakePayments()) {
          console.error('This device is not capable of making Apple Pay payments');
      }

      braintree.client.create({
        authorization: client_token
      }, function (clientErr, clientInstance) {
        if (clientErr) {
          console.error(clientErr);
          return;
        }

        braintree.applePay.create({
          client: clientInstance
        }, function (applePayErr, applePayInstance) {
          if (applePayErr) {
            console.error('Error creating applePayInstance:', applePayErr);
            return;
          }

          // Alternatively, check if the device has an Apple Pay card available.
          // You can do this if your checkout flow defaults to Apple Pay
          // or if you are displaying Apple Pay buttons on a product detail page.

          // Use your Apple Pay merchant identifier
          // to check if payments can be made.

          var promise = ApplePaySession.canMakePaymentsWithActiveCard(applePayInstance.merchantIdentifier);
          promise.then(function (canMakePaymentsWithActiveCard) {
            if (canMakePaymentsWithActiveCard) {
              // Set up Apple Pay buttons
            }
          });
        });

        braintree.dataCollector.create({
          client: clientInstance,
          kount: true
        }, function (err, dataCollectorInstance) {
          if (err) {
            // Handle error in data collector creation
            console.log(err)
              return;
          }
          var form = document.getElementById('my-sample-form');
          var deviceDataInput = form['device_data'];

          if (deviceDataInput == null) {
            deviceDataInput = document.createElement('input');
            deviceDataInput.name = 'device_data';
            deviceDataInput.type = 'hidden';
            form.appendChild(deviceDataInput);
          }

          deviceDataInput.value = dataCollectorInstance.deviceData;
        });

        braintree.paypalCheckout.create({
          client: clientInstance
        }, function (paypalCheckoutErr, paypalCheckoutInstance) {

          // Stop if there was a problem creating PayPal Checkout.
          // This could happen if there was a network error or if it's incorrectly
          // configured.
          if (paypalCheckoutErr) {
            console.error('Error creating PayPal Checkout:', paypalCheckoutErr);
            return;
          }

          // Set up PayPal with the checkout.js library
          paypal.Button.render({
            env: 'sandbox',

            payment: function () {
              return paypalCheckoutInstance.createPayment({
                flow: 'vault',
                billingAgreementDescription: 'Your agreement description',
                enableShippingAddress: true,
                shippingAddressEditable: false,
                shippingAddressOverride: {
                  recipientName: 'Scruff McGruff',
                  line1: '1234 Main St.',
                  line2: 'Unit 1',
                  city: 'Chicago',
                  countryCode: 'US',
                  postalCode: '60652',
                  state: 'IL',
                  phone: '123.456.7890'
                }
              });
            },

            onAuthorize: function (data, actions) {
              return paypalCheckoutInstance.tokenizePayment(data)
                .then(function (payload) {
                  // Submit `payload.nonce` to your server.
                  console.log("Got a nonce: " + payload.nonce);
                });
            },

            onCancel: function (data) {
              console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));
            },

            onError: function (err) {
              console.error('checkout.js error', err);
            }
          }, '#paypal-button').then(function () {
            // The PayPal button will be rendered in an html element with the id
            // `paypal-button`. This function will be called when the PayPal button
            // is set up and ready to be used.
          });

        });
        braintree.hostedFields.create({
          client: clientInstance,
          styles: {
            'input': {
              'font-size': '14px'
            },
            'input.invalid': {
              'color': 'red'
            },
            'input.valid': {
              'color': 'green'
            }
          },
          fields: {
            number: {
              selector: '#card-number',
              placeholder: '4111 1111 1111 1111'
            },
            cvv: {
              selector: '#cvv',
              placeholder: '123'
            },
            expirationDate: {
              selector: '#expiration-date',
              placeholder: '10/2019'
            }
          }
        }, function (hostedFieldsErr, hostedFieldsInstance) {
          if (hostedFieldsErr) {
            console.error(hostedFieldsErr);
            return;
          }

          submit.removeAttribute('disabled');

          form.addEventListener('submit', function (event) {
            event.preventDefault();

            hostedFieldsInstance.tokenize({
              cardholderName: 'apisupport',
              billingAddress: {
                postalCode: '11111'
              }
              // vault: true
            }, function (tokenizeErr, payload) {
              if (tokenizeErr) {
                console.error(tokenizeErr);
                return;
              }

              // If this was a real integration, this is where you would
              // send the nonce to your server.
              console.log('Got a nonce: ' + payload.nonce);
              document.querySelector('#payment_method_nonce').value = payload.nonce;
              console.log(document.querySelector('#nonce'));
              form.submit();
            });
          }, false);
        });
      });
    </script>
  </body>
</html>
